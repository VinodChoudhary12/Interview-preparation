1. What is Spring Boot?
Ans. -> Java Spring Bootis is a popular Framework (Spring Framework), open source, enterprise-level framework for creating stand-alone, production-grade applications that run on the Java virtual machine (JVM).

2. What are the Features of Spring Boot?
Ans. -> There are many useful features of Spring Boot.
		Auto-configuration – Spring Boot automatically configures dependencies by using @EnableAutoconfiguration annotation and reduces boilerplate code.
		Spring Boot Starter POM – These Starter POMs are pre-configured dependencies for functions like database, security, maven configuration etc.
		Spring Boot CLI (Command Line Interface) – This command line tool is generally for managing dependencies, creating projects and running the applications.
		Actuator – Spring Boot Actuator provides health check, metrics and monitors the endpoints of the application. It also simplifies the troubleshooting management.
		Embedded Servers – Spring Boot contains embedded servers like Tomcat and Jetty for quick application run. No need of external servers.

3. What are the advantages of using Spring Boot?
Ans. -> It is very easy to develop Spring Based applications with Java.
		It reduces lots of development time and increases productivity.
		It avoids writing lots of boilerplate Code, Annotations and XML Configuration.
		It is very easy to integrate Spring Boot Application with its Spring Ecosystem like Spring JDBC, Spring ORM, Spring Data, and Spring Security etc.
		It follows “Opinionated Defaults Configuration” Approach to reduce Developer effort.
		It provides Embedded HTTP servers like Tomcat, Jetty etc. to develop and test our web applications very easily.
		It provides CLI (Command Line Interface) tool to develop and test Spring Boot (Java or Groovy) Applications from command prompt very easily and quickly.
		It provides lots of plugins to develop and test Spring Boot Applications very easily using Build Tools like Maven and Gradle.
		It provides lots of plugins to work with embedded and in-memory Databases very easily.

4. Define the Key Components of Spring Boot.
Ans. -> Spring Boot Starters
		Spring Boot Starters is a major key feature or component of Spring Boot Framework. The main responsibility of Spring Boot Starter is to combine a group of common or related dependencies into single dependencies.
		
		Spring Boot Auto-Configuration
		Spring Boot Auto-Configuration is a feature of Spring Boot that automatically configures Spring applications based on the dependencies that are present on the classpath. This can save developers a lot of time and effort, as they do not need to manually configure their applications.

		Spring Boot CLI
		Spring Boot CLI is a command-line interface tool that can be used to create, run, and debug Spring Boot applications. It is a very useful tool for developers, as it can save them a lot of time and effort.

		Spring Boot Actuator
		Spring Boot Actuator is a feature of Spring Boot that provides production-ready features for Spring Boot applications, such as health checks, metrics, and auditing. This can be very useful for developers, as it can help them to monitor and manage their applications in production.

5. Why do we prefer Spring Boot over Spring?
Here is a table that summarizes why we use Spring Boot over Spring framework.

Feature						Spring							Spring Boot

Ease of use					More complex					Easier
Production readiness			Less production-ready			More production-ready
Scalability					Less scalable						More scalable
Speed						Slower							Faster
Customization				Less Customizable				More Customizable

6. Explain the internal working of Spring Boot.
Ans. -> 

7. What are the Spring Boot Starter Dependencies?
Ans. -> spring Boot Starter dependencies are a set of convenient dependency descriptors that you can include in your Spring Boot application. They are a way to reduce the time developers spend on dependency management.
Spring Boot Starter dependencies are auto-configurable, which means that they don't need any particular configuration to work out of the box. However, you can configure them to fit your particular needs.

8. How does a spring application get started?
Ans. -> A Spring application is started by calling the run() method of the SpringApplication class. This method takes a list of arguments, which can be used to configure the application. For example, you can specify the location of the application's configuration files, or the port that the application should listen on.
Once the run() method is called, Spring Boot will create an ApplicationContext. The ApplicationContext is a container that holds all of the beans that make up your application. Spring Boot will then start all of the beans in the ApplicationContext.
When all of the beans have been started, your application is ready to use. You can then interact with your application's beans through the ApplicationContext.

9. What does the @SpringBootApplication annotation do internally?
Ans. -> The @SpringBootApplication annotation combines three annotations. Those three annotations are: @Configuration, @EnableAutoConfiguration, and @ComponentScan.
		
		@AutoConfiguration: This annotation automatically configuring beans in the class path and automatically scans the dependencies according to the application need.
		@ComponentScan: This annotation scans the components (@Component, @Service, etc.) in the package of annotated class and its sub-packages.
		@Configuration: This annotation configures the beans and packages in the class path.
		@SpringBootApplication automatically configures the application based on the dependencies added during project creation and bootstraps the application by using run() method inside the main class of an application.
		@SpringBootApplication = @Configuration + @EnableAutoConfiguration + @ComponentScan

10. What is Spring Initializr?
Ans. -> Spring Initializer is a tool that helps us to create skeleton of spring boot project or project structure by providing a maven or gradle file to build the application. It set up the framework from scratch.

11. What are Spring Boot CLI and the most used CLI commands?
Ans. -> Spring Boot CLI is a command-line tool that can be used to create, run, and manage Spring Boot applications. It is a powerful tool that can help us to get started with Spring Boot quickly and easily. It is built on top of the Groovy programming language.
Most used CLI commands are:
	-run
	-test
	-jar
	-war
	–init
	-help

12. What are the basic Spring Boot Annotations?
Ans. -> @SpringBootApplication: This is the main annotation used to bootstrap a Spring Boot application. It combines three annotations: @Configuration, @EnableAutoConfiguration, and @ComponentScan. It is typically placed on the main class of the application.
	@Configuration: This annotation is used to indicate that a class contains configuration methods for the application context. It is typically used in combination with @Bean annotations to define beans and their dependencies.
	
	@Component: This annotation is the most generic annotation for any Spring-managed component. It is used to mark a class as a Spring bean that will be managed by the Spring container.

	@RestController: This annotation is used to define a RESTful web service controller. It is a specialized version of the @Controller annotation that includes the @ResponseBody annotation by default.

	@RequestMapping: This annotation is used to map HTTP requests to a specific method in a controller. It can be applied at the class level to define a base URL for all methods in the class, or at the method level to specify a specific URL mapping.

13. What is Spring Boot dependency management?
Ans. -> Spring Boot dependency management makes it easier to manage dependencies in a Spring Boot project. It makes sure that all necessary dependencies are appropriate for the current Spring Boot version and are compatible with it. To create a web application, we can add the Spring Boot starter web dependency to our application

14. Is it possible to change the port of the embedded Tomcat server in Spring Boot?
Ans. - > Yes, it is possible to change the port of the embedded Tomcat server in a Spring Boot application.
The simple way is to set the server. port property in your application’s application.properties file. For example, to set the port to 8081, add the following property to the application.properties file:
server.port=8081

15. What is the starter dependency of the Spring boot module?
Ans. -> Spring Boot Starters are a collection of pre-configured maven dependencies that makes it easier to develop particular types of applications. These starters include,

Dependencies
Version control
Configuration needed to make certain features.
To use a Spring Boot starter dependency, we simply need to add it to our project’s pom.xml file. For example, to add the Spring Boot starter web dependency, add the following dependency to the pom.xml file:

<dependency>
      <groupId>org.springframework.boot</groupId> 
      <artifactId>spring-boot-starter-web</artifactId> 
</dependency>

16. What is the default port of Tomcat in spring boot?
Ans. -> The default port of the embedded Tomcat server in Spring Boot is 8080. We can change the default port by setting the server.port property in your application’s application.properties file.

17. Can we disable the default web server in the Spring Boot application?
Ans. -> Yes, we can disable the default web server in the Spring Boot application. To do this, we need to set the server.port property to “-1” in the application’s application.properties file.

18. How to disable a specific auto-configuration class?
Ans. -> To disable a specific auto-configuration class in a Spring Boot application, we can use the @EnableAutoConfiguration annotation with the “exclude” attribute.
@EnableAutoConfiguration(exclude = {//classname})

19. Can we create a non-web application in Spring Boot?
Ans. -> Yes, we can create a non-web application in Spring Boot. Spring Boot is not just for web applications. Using Spring Boot, we can create applications like Microservices, Console applications, and batch applications.

20. Describe the flow of HTTPS requests through the Spring Boot application.
Ans. -> The flow of HTTPS requests through a Spring Boot application is as follows:
Spring Boot HTTP Request Flow
First client makes an HTTP request (GET, POST, PUT, DELETE) to the browser.
After that the request will go to the controller, where all the requests will be mapped and handled.
After this in Service layer, all the business logic will be performed. It performs the business logic on the data that is mapped to JPA (Java Persistence API) using model classes.
In repository layer, all the CRUD operations are being done for the REST APIs.
A JSP page is returned to the end users if no errors are there.

21. Explain @RestController annotation in Spring Boot.
Ans. -> @RestController annotation is like a shortcut to building RESTful services. It combines two annotations:
		@Controller: Marks the class as a request handler in the Spring MVC framework.
		@ResponseBody: Tells Spring to convert method return values (objects, data) directly into HTTP responses instead of rendering views. It enables us to Define endpoints for different HTTP methods (GET, POST, PUT, DELETE), return data in various formats (JSON, XML, etc.) and map the request parameters to method arguments.

22. Difference between @Controller and @RestController
Ans. ->   Features						@Controller									@RestController

		Usage						It marks a class as a controller class.			It combines two annotations i.e. @Controller and @ResponseBody.

		Application					Used for Web applications.					Used for RESTful APIs.

		Request handling and Mapping	Used with @RequestMapping annotation to map HTTP requests with methods.	Used to handle requests like GET, PUT, POST, and DELETE.
		

23. What is the difference between RequestMapping and GetMapping?
Features								@RequestMapping							@GetMapping

Annotations							@RequestMapping							@GetMapping

Purpose		Handles various types of HTTP requests (GET, POST, etc.)					Specifically handles HTTP GET requests.

Example	@RequestMapping(value = “/example”, method = RequestMethod.GET)	@GetMapping(“/example”)

24. What are the differences between @SpringBootApplication and @EnableAutoConfiguration annotation?
Features									@SpringBootApplication									@EnableAutoConfiguration

When to use			When we want to use auto-configuration							When we want to customize auto-configuration

Entry point		Typically used on the main class of a Spring Boot application, serving as the entry point.		Can be used on any configuration class or in conjunction with @SpringBootApplication.

Component Scanning		Includes @ComponentScan annotation to enable component scanning. 				Does not perform component scanning by itself.

Example	@SpringBootApplication public class MyApplication { public static void main(String[] args) { SpringApplication.run(MyApplication.class, args); } }		@Configuration @EnableAutoConfiguration public class MyConfiguration { }

25. What are Profiles in Spring?
Ans. -> Spring Profiles are like different scenarios for the application depending on the environment.
		You define sets of configurations (like database URLs) for different situations (development, testing, production).
		Use the @Profile annotation to clarify which config belongs to where.
		Activate profiles with environment variables or command-line options.
		To use Spring Profiles, we simply need to define the spring.profiles.active property to specify which profile we want to use.

26. Mention the differences between WAR and embedded containers.
Feature									WAR																		Embedded containers

Packaging			Contains all of the files needed to deploy a web application to a web server.			It is a web application server included in the same JAR file as the application code.

Configuration		Requires external configuration files (e.g., web.xml, context.xml) to define the web application.		Uses configuration properties or annotations within the application code.

Security		Can be deployed to a web server that is configured with security features.						Can be made more secure by using security features that are provided by JRE.


27. What is Spring Boot Actuator?
Ans. -> Spring Boot Actuator is a component of the Spring Boot framework that provides production-ready operational monitoring and management capabilities. We can manage and monitor your Spring Boot application while it is running.

Note: To use Spring Boot Actuator, we simply need to add the spring-boot-starter-actuator dependency to our project.


28. How to enable Actuator in the Spring boot application?
Ans. -> 	Below are the steps to enable actuator in Spring Boot Application:
		Add Actuator dependency.
		Enable endpoints in application.properties.
		Run your Spring Boot app.
		Now we can access Actuator endpoints at URLs on the management port.

29. What is the purpose of using @ComponentScan in the class files?
Ans. -> The @ComponentScan annotation in Java is used to tell Spring to scan the specified packages for annotated components. These components can include beans, controllers, services, and repositories.
The @ComponentScan annotation is typically used in conjunction with the @Configuration annotation. The @Configuration annotation indicates that the class is a Spring configuration class.

30. What are the @RequestMapping and @RestController annotations in Spring Boot used for?
Ans. -> @RequestMapping: @RequestMapping is used to map HTTP requests to handler methods in your controller classes. It can be used at the class level and method level. It supports mapping by:

HTTP method – GET, POST, PUT, DELETE

@RestController: @RestController is a convenience annotation that combines @Controller and @ResponseBody. It indicates a controller where every method returns a domain object instead of a view.

@RestController = @Controller + @ResponseBody

31. How to get the list of all the beans in your Spring boot application?
Using the ApplicationContext object in Spring Boot, we can retrieve a list of all the beans in our application. The ApplicationContext is responsible for managing the beans and their dependencies. 
Example :- import org.springframework.beans.factory.annotation.Autowired;
			import org.springframework.context.ApplicationContext;
			import org.springframework.stereotype.Component;
			import java.util.Arrays;

			@Component
			public class BeanListPrinter {

				@Autowired
				private ApplicationContext applicationContext;

				public void printAllBeans() {
					String[] allBeanNames = applicationContext.getBeanDefinitionNames();
					Arrays.sort(allBeanNames);
					for (String beanName : allBeanNames) {
						System.out.println(beanName);
					}
				}
			}


32. Can we check the environment properties in your Spring boot application explain how?
Ans. -> Yes, we can check the environment properties in our Spring Boot Application. The Environment object in a Spring Boot application can be used to check the environment’s properties.
Configuration settings for the application, includes:
property files
command-line arguments
environment variables
We can get the Environment instance by calling the getEnvironment() method.
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.env.Environment;
import org.springframework.stereotype.Component;

@Component
public class EnvironmentPropertyReader {

    @Autowired
    private Environment environment;

    public void readProperties() {
        String propertyValue = environment.getProperty("your.property.name");
        System.out.println("Value of your.property.name: " + propertyValue);
    }
}


33. How to enable debugging log in the spring boot application?
Ans. -> To enable debugging log in Spring Boot Application, follow the below steps:
		Add the logging level property to application.properties.
		Configure the log pattern to include useful information.
		Run the Spring Boot application.
		Using the actuator endpoint, the log level can also be changed at runtime.

		Curl -X POST \http://localhost:8080/actuator/loggers/<logger-name> 
		\ -H 'content-type: application/json' \-d '{"configuredLevel": "DEBUG"}'

36. What is the difference between Constructor and Setter Injection?
Ans. -> 	Features								Constructor Injection														Setter Injection

Dependency		Dependencies are provided through constructor parameters.				Dependencies are set through setter methods after object creation.

Immutability		Promotes immutability as dependencies are set at creation.				Dependencies can be changed dynamically after object creation.

Dependency Overriding	Harder to override dependencies with different implementations.		Allows easier overriding of dependencies using different setter values.

What is Connection Pooling?
Ans. -> Connection Pooling is a technique used to manage database connections efficiently by reusing existing connections rather than opening and closing them repeatedly. It is a common performance optimization in applications that interact with databases.

Explain the advantages of using Spring Boot for application development.
Ans. -> Spring Boot helps to create stand-alone applications which can be started using java.jar (Doesn’t require configuring WAR files).
		Spring Boot also offers pinpointed ‘started’ POMs to Maven configuration.
		Has provision to embed Undertow, Tomcat, Jetty, or other web servers directly.
		Auto-Configuration: Provides a way to automatically configure an application based on the dependencies present on the classpath.
		Spring Boot was developed with the intention of lessening the lines of code.
		It offers production-ready support like monitoring and apps developed using spring boot are easier to launch

3. Differentiate between Spring and Spring Boot.
The Spring Framework provides multiple features like dependency injection, data binding, aspect-oriented programming (AOP), data access, and many more that help easier development of web applications whereas Spring Boot helps in easier usage of the Spring Framework by simplifying or managing various loosely coupled blocks of Spring which are tedious and have a potential of becoming messy.
Spring boot simplifies commonly used spring dependencies and runs applications straight from a command line. It also doesn’t require an application container and it helps in monitoring several components and configures them externally

What are the features of Spring Boot?
Spring Boot CLI – This allows you to Groovy / Maven for writing Spring boot application and avoids boilerplate code.
Starter Dependency – With the help of this feature, Spring Boot aggregates common dependencies together and eventually improves productivity and reduces the burden on
Spring Initializer – This is a web application that helps a developer in creating an internal project structure. The developer does not have to manually set up the structure of the project while making use of this feature.
Auto-Configuration – This helps in loading the default configurations according to the project you are working on. In this way, unnecessary WAR files can be avoided.
Spring Actuator – Spring boot uses actuator to provide “Management EndPoints” which helps the developer in going through the Application Internals, Metrics etc.
Logging and Security – This ensures that all the applications made using Spring Boot are properly secured without any hassle.

What does @SpringBootApplication annotation do internally?

What are the effects of running Spring Boot Application as “Java Application”?
The application automatically launches the tomcat server as soon as it sees that we are running a web application.
7. What is Spring Boot dependency management system?
It is basically used to manage dependencies and configuration automatically without the need of specifying the version for any of that dependencies.


==============================================
What is the importance of @SpringBootApplication?
What is Auto Configuration?
Ans. -> Auto Configuration in Spring Boot simplifies the setup of applications by automatically configuring necessary components based on the available dependencies. It helps in reducing boilerplate code, speeds up the development process, and ensures that applications are easily maintainable and extendable.

How can we find more information about Auto Configuration?
What is an embedded server? Why is it important?
What is the default embedded server with Spring Boot?
What are the other embedded servers supported by Spring Boot?
What are Starter Projects?
Can you give examples of important starter projects?
What is Starter Parent?
What are the different things that are defined in Starter Parent?
How does Spring Boot enforce common dependency management for all its Starter projects?
What is application.properties?
What are some of the important things that can customized in application.properties?
How do you externalize configuration using Spring Boot?
How can you add custom application properties using Spring Boot?
What is @ConfigurationProperties?
How do you define beans for a specific profile?
How do you create application configuration for a specific profile?
How do you have different configuration for different environments?
How do you monitor web services using Spring Boot Actuator?
How do you find more information about your application envrionment using Spring Boot?
What is a CommandLineRunner?
What is the difference between Spring Boot and Spring Framework?
What are the starter dependencies in Spring Boot?
What is the purpose of the @SpringBootApplication annotation?
What is the purpose of the @Configuration annotation?
What is the purpose of the @Bean annotation?
What is the purpose of the @Autowired annotation?
What is the purpose of the @Value annotation?
What is the purpose of the @Profile annotation?
What is the purpose of the @EnableAutoConfiguration annotation?
How to access actuator endpoints in Spring Boot?
======================
1. What do you understand by the term ‘Spring Boot’?
2. Explain the advantages of using Spring Boot for application development.
3. Differentiate between Spring and Spring Boot.
Ans. ->	 Feature							Spring Framework									Spring Boot
Purpose						Comprehensive framework for enterprise Java development	Simplifies Spring application development, especially for microservices
Configuration				Requires extensive configuration (XML or Java)				Auto-configuration with sensible defaults
Modularity					Modular, multiple projects and configurations				Integrated, convention over configuration
Application Type				Suitable for complex, enterprise-level applications			Ideal for microservices and rapid development
Server Support				Requires external server setup								Supports embedded servers (Tomcat, Jetty, Undertow)
Production-Ready Features	Requires manual setup									Built-in Actuator for health checks, metrics, etc.
Development Speed			Slower due to extensive setup								Faster with minimal setup


4. What are the features of Spring Boot?
Ans. ->	Auto-Configuration:
		Automatically configures Spring and third-party libraries based on the dependencies in your project.

		Starter POMs:
		Predefined sets of dependencies for specific functionalities, like web applications or JPA for data access.
		Example: spring-boot-starter-web for web development.

		Embedded Servers:
		Allows you to run applications with built-in servers like Tomcat, Jetty, and Undertow.
		This means you don't need to set up an external server.

		Spring Boot Actuator:
		Provides built-in tools to monitor and manage your application.
		Includes endpoints for health checks and metrics.
	
		Spring Boot CLI:
		A command-line tool to quickly develop Spring applications using Groovy scripts.

		Spring Initializr:
		An online tool to create Spring Boot project templates.
		Accessible at start.spring.io.
		
		Externalized Configuration:
		Allows you to configure your application using files like application.properties or application.yml, as well as environment variables and command-line arguments.

		Developer Tools (DevTools):
		Tools to improve the development experience, including automatic restarts and live reload.
		Speeds up the development process.
	

5. What does @SpringBootApplication annotation do internally?
Ans. -> When you annotate your main class with @SpringBootApplication, Spring Boot:

Treats it as a configuration class (@SpringBootConfiguration).
Enables auto-configuration (@EnableAutoConfiguration).
Scans the package and its sub-packages for Spring components (@ComponentScan).
This annotation significantly reduces the amount of boilerplate code and configuration needed to set up a Spring Boot application.


6. What are the effects of running Spring Boot Application as “Java Application”?
7. What is Spring Boot dependency management system?
8. What are the possible sources of external configuration?
9. Can we change the default port of the embedded Tomcat server in Spring boot?
10. Can you tell how to exclude any package without using the basePackages filter?
11. How to disable specific auto-configuration class?
12. Can the default web server in the Spring Boot application be disabled?
13. What are the uses of @RequestMapping and @RestController annotations in Spring Boot?

What are the transaction management supports provided by spring?
Ans. -> Spring framework provides two type of transaction management supports:
		Programmatic Transaction Management: should be used for few transaction operations.
		Declarative Transaction Management: should be used for many transaction operations.
	
what is Front Controller?
Ans. -> Front Controller: A design pattern that centralizes request handling in a web application.
Purpose: To provide a single entry point for all requests, enabling centralized processing such as security, logging, and request preprocessing.
Spring MVC Implementation: The DispatcherServlet serves as the Front Controller, routing requests to appropriate handlers and views.
Using the Front Controller pattern helps in creating a scalable, maintainable, and modular web application by ensuring that all requests go through a central point where common concerns can be managed effectively.

When to Use Factory Design Pattern Instead of Dependency Injection?
Ans. -> Factory Design Pattern: Use when object creation logic is complex, dynamic, or when you are not using a DI framework.
		
		Pros: Encapsulates object creation logic, suitable for dynamic instantiation.
		Cons: Can lead to more boilerplate code and less flexibility in managing dependencies.
		Dependency Injection: Use when you need to decouple dependencies, improve testability, and leverage the features of a DI framework like Spring.

		Pros: Enhances decoupling, testability, configuration management, and lifecycle management.
		Cons: May introduce additional complexity if used inappropriately for small projects.
		Choosing between the Factory Design Pattern and Dependency Injection depends on the specific requirements of your application and the context in which you are working.

11. What Do you understand about Spring Data Rest?
Spring Data REST is a framework that exposes Spring Data repositories as RESTful web services. It allows us to expose repositories as REST endpoints with minimal configuration by following Spring Data REST Technologies like Spring Data and Spring MVC.

9. Mention the steps to connect the Spring Boot application to a database using JDBC.
Ans. -> 	Add Dependencies: Include Spring Boot Starter JDBC and the database driver.
		Configure Properties: Set up the database connection properties in application.properties or application.yml.
		JDBC Template Bean: Utilize the automatically configured JdbcTemplate bean.
		Repository Class: Create a repository class to perform database operations using JdbcTemplate.
		Service or Controller: Use the repository in a service or controller to manage data access.

6. What is Bean Wiring?
Bean wiring is a fundamental concept in Spring that helps manage the dependencies and lifecycle of beans, ensuring that the application components are properly connected and ready to function.

7. What Are Spring Boot DevTools Used For?
Ans. -> Spring Boot DevTools is a powerful set of tools that enhances the development experience by providing features like automatic restarts, live reload, and configuration optimizations. These tools streamline the development process, making it faster and more efficient to see changes and debug issues.

27. What are the differences between the <context:annotation-config> vs <context:component-scan> tags?

Why Spring Boot is preferred over any other framework?
Ans. ->The Spring cloud that comes with Spring Boot, includes vast libraries, which is one of the major reasons why most developers prefer the Java-based Spring Boot. In addition, Spring Boot offers superior compatibility with Spring frameworks, and it also provides excellent support for docker containerization, heightening performance, and useability. Some of the most compelling reasons for using Spring Boot include: 

	Provides the best means to configure Java beans
	Offers robust batch processing 
	Helps users effectively manage Representational State Transfer (REST) endpoints
	Integrates an auto-configuration tool, eliminating the need for manual configuration 
	Enables  annotation-based configurations
	Ease of dependency management
	Includes embedded servlet containers


What are the key dependencies of Spring Boot?
Ans. ->	Mentioned below are important Spring Boot dependencies that need to be added to a Gradle-based or Maven-based application, to ensure application compatibility with Spring Boot features.
	spring-boot-starter-parent
	spring-boot-maven-plugin
	spring-boot-starter-test
	spring-boot-starter-security
	spring-boot-starter-actuator
	Spring-boot-starter-web

how does spring Boot works?
Ans. -> Spring Boot automatically configures your application based on the dependencies you have added to the project by using annotation. The entry point of the spring boot application is the class that contains @SpringBootApplication annotation and the main method.

What is the importance of the web.xml in Spring MVC?
web.xml is also known as the Deployment Descriptor which has definitions of the servlets and their mappings, filters, and lifecycle listeners. It is also used for configuring the ContextLoaderListener. Whenever the application is deployed, a ContextLoaderListener instance is created by Servlet container which leads to a load of WebApplicationContext.

15. How to enable Actuator in Spring boot application?
Ans. -> To enable the spring actuator feature, we need to add the dependency of “spring-boot-starter-actuator” in pom.xml

14. What is Spring Actuator? What are its advantages?

6. Can we override or replace the Embedded tomcat server in Spring Boot?
Yes, we can replace the Embedded Tomcat server with any server by using the Starter dependency in the pom.xml file. Like you can use spring-boot-starter-jetty as a dependency for using a jetty server in your project.

7. Can we disable the default web server in the Spring boot application?
Yes, we can use application.properties to configure the web application type i.e spring.main.web-application-type=none.

8. How to disable a specific auto-configuration class?
You can use exclude attribute of @EnableAutoConfiguration if you want auto-configuration not to apply to any specific class.

9. Explain @RestController annotation in Spring boot?
It is a combination of @Controller and @ResponseBody, used for creating a restful controller. It converts the response to JSON or XML. It ensures that data returned by each method will be written straight into the response body instead of returning a template.

10. What is the difference between @RestController and @Controller in Spring Boot?
@Controller Map of the model object to view or template and make it human readable but @RestController simply returns the object and object data is directly written in HTTP response as
json or xml

12. What is the difference between RequestMapping and GetMapping?
RequestMapping can be used with GET, POST, PUT, and many other request methods using the method attribute on the annotation. Whereas getMapping is only an extension of RequestMapping which helps you to improve on clarity on request.

13. What is the use of Profiles in spring boot?
Ans. -> While developing the application we deal with multiple environments such as dev, QA, Prod, and each environment requires a different configuration. For eg., we might be using an embedded H2 database for dev but for prod, we might have proprietary Oracle or DB2. Even if DBMS is the same across the environment, the URLs will be different.


What Is Spring Security?
Spring Security is a separate module of the Spring framework that focuses on providing authentication and authorization methods in Java applications. It also takes care of most of the common security vulnerabilities such as CSRF attacks.

35) What is a Proxy?

Full form of REST API is Representational State Transfer Application Programming Interface