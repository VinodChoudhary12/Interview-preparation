2 How are the JSP requests handled ? 
3 What are the advantages of JSP ?
4 What are Directives ? What are the different types of Directives available in JSP ?
5 What are JSP actions ?
6 What are Scriptlets ?
7 What are Decalarations ?
8 What are Expressions ?
10 What is meant by implicit objects and what are they ?
 
Link -> https://www.edureka.co/blog/interview-questions/jsp-interview-questions/	

Q1.In the JSP is it possible to write jspService() method explicitly?
No b'z this method already generated by JSP Engine automatically.
If we write explicitly then generated servlet will contain two jspService() methods,which causes
compile time error.

What is the significance of _ symbol in jspService() method?
It indicates that this method will be generated automatically by JSP Engine and we cannot write
explicitly.

Q3. Is it possible to write service() method explicitly in the JSP?
No b'z this method declared as final in HttpJspBase class

=================================================================
1) Differences b/w Static Include and Dynamic Include
					OR
	Differences b/w Include Directive and Include Action
Ans. -> Include Directive Include Action
		1) <%@ include file = "second.jsp" %> Contains only one Attribute File.
		1) <jsp:include page = "second.jsp"flush = "true"/> Contains 2 Attributes Page and File.

		2) The Content of Target JSP will be included at Translation Time. Hence it is also considered as Static Include.
		2) The Response Target JSP will be included at Runtime. Hence it is also considered as Dynamic Include.
		
		3) For both including and included JSPs, a Single Servlet will be generated. Hence Code sharing between the Components is possible.
		3) For both including and included JSPs, separate Servlets will be generated. Hence Code

1) What is JSP ? Describe its Concept?
Ans. -> Java Server Pages (JSP) is a server side component for the generation of dynamic information as the response. Best suitable to implement view 
		components (presentation layer components). It is part of SUN’s J2EE platform.

2) Explain the benefits of JSP?
Ans. -> These are some of the benefits due to the usage of JSP they are:
	1) Portability, reusability and logic components of the language can be used across various platforms.
	2) Memory and exception management.
	3) Has wide range of API which increases the output functionality.
	4) Low maintenance and easy deployment.
	5) Robust performance on multiple requests.

3) Is JSP technology extensible?
Ans, -> Yes, it is. JSP technology is extensible through the development of custom actions, or tags, which are encapsulated in tag libraries.

4) Can we implement an interface in a JSP?
Ans. -> No

5) What are the advantages of JSP over Servlet?
Ans. -> 1) Best suitable for view components
		2) We can separate presentation and business logic
		3) The JSP author not required to have strong java knowledge
		4) If we are performing any changes to the JSP, then not required to recompile and reload explicitly
		5) We can reduce development time.
		6) Differences between Servlets and JSP?
		
		Servlets JSP
		1) Best suitable for processing Logic 1) Best suitable for presentation Logic
		2) We cannot separate Business Logic and Presentation Logic
		2) Separation of Presentation Logic and
		
		Business Logic is possible
		3) Servlet Developer should have Strong Knowledge in Java
		3) JSP Author is not required to have Strong
		Knowledge in Java
		4) For Source Code changes ,we have to perform explicitly Compilation 
		4) For Source Code changes ,it is not required to perform explicit Compilation
		
		5) Relatively Development Time is more 
		5) Relatively Development Time is less

7) Explain the differences between ASP and JSP?
Ans. -> The big difference between both of these technologies lies with the design of the software.
		JSP technology is server and platform independent whereas ASP relies primarily on Microsoft technologies.

8) Can I stop JSP execution while in the midst of processing a request?
Ans. -> Yes. Preemptive termination of request processing on an error condition is a good way to maximize the throughput of a high-volume JSP engine. The trick (assuming Java is your scripting language) is to use the return statement when we want to terminate further processing.

9) How to Protect JSPs from direct access ?
Ans. -> If the JSP is secured resource then we can place inside WEB-INF folder so that end user is not allowed to access directly by the name. We can 
		provide the url pattern by configuring in
		web.xml
		<web-app>
			<servlet>
 				<servlet-name>Demo JSP</servlet-name>
 				<jsp-file>/WEB-INF/test.jsp</jsp-file>
 			<sevlet>
 			<servlet-mapping>
 				<servlet-name>Demo JSP</servlet-name>
				 <url-pattern>/test</url-pattern>
 			</servlet-mapping>
	</web-app>
	
10) Explain JSP API ?
Ans. -> The JSP API contains only one package : javax.servlet.jsp
		It contains the following 2 interfaces:
		1) JspPage: This interface defines the two life cycle methods jspInit() and jspDestroy().
		2) HttpJspPage: This interface defines only one life cyle method jspService() method.
			Every generated servlet for the jsps should implement either JspPage or HttpJspPage interface either directly or indirectly.

11) What are the lifecycle phases of a JSP?
Ans. -> Life cycle of JSP contains the following phases:
		Page translation: -converting from .jsp file to .java file
		Page compilation: converting .java to .class file
		Page loading : This class file is loaded.
		Create an instance :- Instance of servlet is created
		jspInit() method is called
		jspService() is called to handle service calls
		jspDestroy() is called to destroy it when the servlet is not required.

12) Explain the life-cycle mehtods in JSP?
Ans. -> The jspInit()- The container calls the jspInit() to initialize te servlet instance.It is called before any other method, and is called only 
		once for a servlet instance.
		The jspservice()- The container calls the jspservice() for each request, passing it the request and the response objects.
		The jspDestroy()- The container calls this when it decides take the instance out of service. It is the last method called n the servlet instance.

13) Difference between jspService() and other life cycle methods.
Ans. -> JSP contains 3 life cycle methods namely jspInit( ), jspService() and jspDestroy().
		In these, jspInit() and jspDestroy() can be overridden and we cannot override jspService().
		Webcontainer always generate jspService() method with JSP content. If we are writing
		jspService() method , then generated servlet contains 2 jspService() methods which will
		cause compile time error.
		To show this difference jspService() method is prefixed with ‘_’ by the JSP container and
		the other two methods jspInit() and jspDestroy() has no special prefixes.

14) What is the jspInit() method?
Ans. -> The jspInit() method of the javax.servlet.jsp.JspPage interface is similar to the init() method of servlets. This method is invoked by the 
		container only once when a JSP page is initialized.
		It can be overridden by a page author to initialize resources such as database and network connections, and to allow a JSP page to read persistent configuration data.
		
15) What is the jspService() method?
Ans. -> The jspService() method of the javax.servlet.jsp.HttpJspPage interface is invoked every time a new request comes to a JSP page. This method 
		takes the HttpServletRequest and HttpServletResponse objects as its arguments. A page author cannot override this method, as its implementation is provided by the container.

16) What is the jspDestroy() method?
Ans. -> The jspDestroy() method of the javax.servlet.jsp.JspPage interface is invoked by the container when a JSP page is about to be destroyed. This 
		method is similar to the destroy() method of servlets. It can be overridden by a page author to perform any cleanup operation such as closing a database connection.

17) What JSP lifecycle methods can I override?
Ans. -> We can override jspInit() and jspDestroy() methods but we cannot override jspService() method.

18) How can I override the jspInit() and jspDestroy() methods within a JSP page?
Ans. -> By using JSP declation tag
	<%!
		public void jspInit() {
		. . .
		}
	%>
	<%!
		public void jspDestroy() {
		. . .
		}
	%>

19) Explain about translation and execution of Java Server pages?
Ans. -> A java server page is executed within a Java container. A Java container converts a Java file into a servlet. Conversion happens only once 
		when the application is deployed onto the web server. During the process of compilation Java compiler checks for modifications if any modifications are present it would modify and then execute it.

20) Why is jspService() method starting with an '_' while other life cycle methods do not?
Ans. -> jspService() method will be written by the container hence any methods which are not to be overridden by the end user are typically written starting with an '_'. This is the reason why we don't override jspService() method in any JSP page.

21) How to pre-compile JSP?
Ans. -> Add jsp_precompile as a request parameter and send a request to the JSP file. This will make the jsp pre-compile.
		http://localhost:8080/jsp1/test.jsp?jsp_precompile=true
		It causes excution of JSP life cycle until jspInit() method without executing jspService() method.

22) The benefits of pre-compiling a JSP page?
Ans. -> It removes the start-up lag that occurs when a container must translate a JSP page upon receipt of the first request.

23) How many JSP scripting elements and explain them?
Ans. -> Inside JSP 4 types of scripting elements are allowed.
		1) Scriptlet <% any java code %>
		Can be used to place java code.
		2) declarative <%! Java declaration %>
		Can be used to declare class level variables and methods
		3) expression: <%= java expression %>
		To print java expressions in the JSP
		4) comment <%-- jsp comment --%>

24) What is a Scriptlet?
Ans. -> JSP scriptlet can be used to place java code.
	Syntax:
		<%
		Any java code
		%>
The java code present in the scriptlet will be placed directly inside jspService() method

25) What is a JSP declarative?
Ans. -> JSP declarations are used to declare class variables and methods (both instance and static) in a JSP page. These declations will be placed 
		directly at class level in the generated servlet and these are available to the entire JSP.
		Syntax:
		<%! This is my declarative %>
		Eg: <%! int j = 10; %>

26) How can I declare methods within my JSP page?
Ans. -> We can declare methods by using JSP declarative tag.
		<%!
			public int add(inti, intj) {
			return i+j;
			}
		%>

27) What is the difference b/w variable declared inside a declaration and variable declared in scriplet ?
Ans. -> Variable declared inside declaration part is treated as a instance variable and will be placed directly at class level in the generated 	
		servlet.
		<%! int k = 10; %>
			Variable declared in a scriptlet will be placed inside jspService() method of generated
			servlet.It acts as local variable.
		<%
			int k = 10;
		%>

28) What is a Expression?
Ans. -> JSP Expression can be used to print expression to the JSP.
		Syntax:
		<%= java expression %>
		Eg: <%= new java.util.Date() %>
		The expression in expression tag should not ends with semi-colon
		The expression value will become argument to the out.pritln() method in the generated servlet

29) What are the three kinds of comments in JSP and what's the difference between them?
Ans. -> 3 types of comments are allowed in JSP
		JSP Comment:
		<%-- this is jsp comment --%>
		This is also known as hidden comment and it is visible only in the JSP and in rest of phases of JSP life cycle it is not visible.
		HTML Comment:
		<!-- this is HTMl comment -- >
		This is also known as template text comment or output comment. It is visible in all phases of JSP including source code of generated response.
		Java Comments:
		With in the script lets we can use even java comments .
		<%
		// single line java comment
		/* this is multiline comment */
		%>
		This type of comments also known as scripting comments and these are visible in the generated servlet also.

30) What is output comment?
Ans. -> The comment which is visible in the source of the response is called output comment.
		<!-- this is HTMl comment -- >

31) What is a Hidden Comment?
Ans. -> <%-- this is jsp comment --%>
		This is also known as JSP comment and it is visible only in the JSP and in rest of phases of
		JSP life cycle it is not visible.

32) How is scripting disabled?
Ans. -> Scripting is disabled by setting the scripting-invalid element of the deployment descriptor to true. It is a subelement of jsp-property-group. 
		Its valid values are true and false. The syntax	for disabling scripting is as follows:
		<jsp-property-group>
			<url-pattern>*.jsp</url-pattern>
			<scripting-invalid>true</scripting-invalid>
		</jsp-property-group>

33) What are the JSP implicit objects?
Ans. -> Implicit objects are by default available to the JSP. Being JSP author we can use these and not required to create it explicitly.
		1) request
		2) response
		3) pageContext
		4) session
		5) application
		6) out
		7) config
		8) page
		9) exception

34) How does JSP handle run-time exceptions?
Ans. -> You can use the errorPage attribute of the page directive to have uncaught run-time exceptions automatically forwarded to an error processing 
		page.
		For example:
		<%@ page errorPage="error.jsp" %> redirects the browser to the JSP page error.jsp if an uncaught exception is encountered during request processing.
		Within error.jsp, if you indicate that it is an error-processing page, via the directive:
		<%@ page isErrorPage="true" %>
		In the error pages we can access exception implicit object.

35) How can I implement a thread-safe JSP page? What are the advantages and Disadvantages of using it?
Ans. ->  You can make your JSPs thread-safe by having them implement the SingleThreadModel interface. This is done by adding the directive in the JSP.
		<%@ page isThreadSafe="false" %>
		The generated servlet can handle only one client request at time so that we can make JSP as thread safe. We can overcome data inconsistency problems by this approach.
		The main limitation is it may affect the performance of the system.

36) What is the difference between ServletContext and PageContext?
Ans. -> ServletContext: Gives the information about the container and it represents an application.
		PageContext: Gives the information about the Request and it can provide all other implicit JSP objects .

37) Is there a way to reference the "this" variable within a JSP page?
Ans, -> Yes, there is. The page implicit object is equivalent to "this", and returns a reference to the generated servlet.

38) Can you make use of a ServletOutputStream object from within a JSP page?
Ans. -> Yes . By using getOutputStream() method on response implicit object we can get it.

39) What is the page directive is used to prevent a JSP page from automatically creating a session?
Ans. -> session object is by default available to the JSP. We can make it unavailable by using page directive as follows.
		<%@ page session="false">

40) What's a better approach for enabling thread-safe servlets and JSPs? Single Thread Model Interface OR Synchronization?
Ans. -> Synchronized keyword is recommended to use to get thread-safety.

41) What are various attributes Of Page Directive?
Ans. -> Page directive contains the following 13 attributes.
		1) language
		2) extends
		3) import
		4) session
		5) isThreadSafe
		6) info
		7) errorPage
		8) isError page
		9) contentType
		10) isELIgnored
		11) buffer
		12) autoFlush
		13) pageEncoding

42) Explain about autoflush?
Ans. -> This command is used to autoflush the contents. If a value of true is used it indicates to flush the buffer whenever it is full. In case of 
		false it indicates that an exception should be thrown whenever the buffer is full. If you are trying to access the page at the time of conversion of a JSP into servlet will result in error.

43) How do you restrict page errors display in the JSP page?
Ans. -> You first set "errorPage" attribute of PAGE directive to the name of the error page (ie errorPage="error.jsp")in your jsp page . Then in the 
		error.jsp page set "isErrorpage=TRUE".	When an error occur in your jsp page, then the control will be automatically forward to error page.
		
44) What are the different scopes available fos JSPs ?
Ans. -> There are 4 types of scopes are allowed in the JSP.
		1) page - with in the same page
		2) request - after forward or include also you will get the request scope data.
		3) session - after senRedirect also you will get the session scope data. All data stored in session is available to end user till session 	closed or browser closed.
		4) application - Data will be available throughout the application. One user can store data in application scope and other can get the data from application scope.

45) When do use application scope?
Ans. -> If we want to make our data available to the entire application then we have to use application scope.

46) What are the different scope valiues for the <jsp:useBean>?
Ans. -> The different scope values for <jsp:useBean> are
		1) page
		2) request
		3) session
		4) application

47) How do I use a scriptlet to initialize a newly instantiated bean?
Ans. -> jsp:useBean action may optionally have a body. If the body is specified, its contents will be automatically invoked when the specified bean is 
		instantiated. Typically, the body will contain scriptlets or jsp:setProperty tags to initialize the newly instantiated bean, although you are not restricted to using those alone.
		The following example shows the “today” property of the Foo bean initialized to the current date when it is instantiated. Note that here, we make use of a JSP expression within the
		jsp:setProperty action.
		<jsp:useBean id="foo" class="com.Bar.Foo" >
		<jsp:setProperty name="foo" property="x" value="<%=java.text.DateFormat.getDateInstance().format(new java.util.Date()) %>" / >
		<%-- scriptlets calling bean setter methods go here --%>
		</jsp:useBean >

48) Can a JSP page instantiate a serialized bean?
Ans. -> No problem! The use Bean action specifies the beanName attribute, which can be used for indicating a serialized bean.
		For example:
		A couple of important points to note. Although you would have to name your serialized file "filename.ser", you only indicate "filename" as the value for the beanName attribute. Also, you will have to place your serialized file within the WEB-INF/jspbeans directory for it to be located by the JSP engine.

49) How do we include static files within a jsp page ?
Ans. -> We can include static files in JSP by using include directive (static include) 
		<%@ include file=”header.jsp” %>
		The content of the header.jsp will be included in the current jsp at translation time. Hence this inclusion is also known as static include.

50) In JSPs how many ways are possible to perform inclusion?
Ans. -> In JSP, we can perform inclusion in the following ways.
		1) By include directive:
			<%@ include file=”header.jsp” %>
			The content of the header.jsp will be included in the current jsp at translation time.
			Hence this inclusion is also known as static include.
		2) By include action:
			<jsp:include page=”header.jsp” />
			The response of the jsp will be included in the current page response at request
			processing time(run time) hence it is also known as dynamic include.
		3) By using pageContext implicit object
			<%
				pageContext.include(“/header.jsp”);
			%>
			This inclusion also happened at request processing time(run time).
		4) By using RequestDispatcher object
			<%
			RequestDispatcher rd = request.getRequestDispatcher(“/header.jsp”);
			Rd.incliude(request,response);
			%>

51) In which situation we can use static include and dynamic include in JSPs?
Ans. -> If the target resource ( included resource) won’t change frequently, then it is recommended to use static include.
		<%@ include file=”header.jsp” %>
		If the target resource(Included page) will change frequently , then it is recommended to use dynamic include.
		< jsp:include page=”header.jsp” />


=======================================================
2) Explain about JSP Implicit Objects?
Ans. -> The following is the list of all possible 9 JSP implicit objects.
1) request ➔ HttpServletRequest(I)
2) response ➔ HttpServletResponse(I)
3) config ➔ ServletConfig(I)
4) application ➔ ServletContext(I)
5) session ➔ HttpSession(I)
6) out ➔ javax.serlvet.jsp.JspWriter(AC)
7) page ➔ java.lang.Object(CC)
8) pageContext ➔ javax.servlet.jsp.PageContext(AC)
9) exception ➔ java.lang.Throwable(CC)
